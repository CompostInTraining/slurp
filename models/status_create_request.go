// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StatusCreateRequest StatusCreateRequest models status creation parameters.
//
// swagger:model StatusCreateRequest
type StatusCreateRequest struct {

	// Content type to use when parsing this status.
	// in: formData
	ContentType string `json:"content_type,omitempty"`

	// ID of the status being replied to, if status is a reply.
	// in: formData
	InReplyToID string `json:"in_reply_to_id,omitempty"`

	// ISO 639 language code for this status.
	// in: formData
	Language string `json:"language,omitempty"`

	// Array of Attachment ids to be attached as media.
	// If provided, status becomes optional, and poll cannot be used.
	//
	// If the status is being submitted as a form, the key is 'media_ids[]',
	// but if it's json or xml, the key is 'media_ids'.
	//
	// in: formData
	MediaIDs []string `json:"media_ids"`

	// ISO 8601 Datetime at which to schedule a status.
	// Providing this parameter will cause ScheduledStatus to be returned instead of Status.
	// Must be at least 5 minutes in the future.
	// in: formData
	ScheduledAt string `json:"scheduled_at,omitempty"`

	// Status and attached media should be marked as sensitive.
	// in: formData
	Sensitive bool `json:"sensitive,omitempty"`

	// Text to be shown as a warning or subject before the actual content.
	// Statuses are generally collapsed behind this field.
	// in: formData
	SpoilerText string `json:"spoiler_text,omitempty"`

	// Text content of the status.
	// If media_ids is provided, this becomes optional.
	// Attaching a poll is optional while status is provided.
	// in: formData
	Status string `json:"status,omitempty"`

	// Duration the poll should be open, in seconds.
	// If provided, media_ids cannot be used, and poll[options] must be provided.
	// in: formData
	SwaggerPollExpiresIn int64 `json:"poll[expires_in],omitempty"`

	// Hide vote counts until the poll ends.
	SwaggerPollHideTotals *bool `json:"poll[hide_totals],omitempty"`

	// Allow multiple choices on this poll.
	SwaggerPollMultiple *bool `json:"poll[multiple],omitempty"`

	// Array of possible answers.
	// If provided, media_ids cannot be used, and poll[expires_in] must be provided.
	// in: formData
	SwaggerPollOptions []string `json:"poll[options][]"`

	// Visibility of the posted status.
	// in: formData
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this status create request
func (m *StatusCreateRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this status create request based on context it is used
func (m *StatusCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatusCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusCreateRequest) UnmarshalBinary(b []byte) error {
	var res StatusCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
