// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Announcement Announcement models an admin announcement for the instance.
//
// swagger:model Announcement
type Announcement struct {

	// Announcement doesn't have begin time and end time, but begin day and end day.
	AllDay bool `json:"all_day,omitempty"`

	// The body of the announcement.
	// Should be HTML formatted.
	// Example: \u003cp\u003eThis is an announcement. No malarky.\u003c/p\u003e
	Content string `json:"content,omitempty"`

	// Emojis used in this announcement.
	Emojis []*Emoji `json:"emoji"`

	// When the announcement should stop being displayed (ISO 8601 Datetime).
	// If the announcement has no end time, this will be omitted or empty.
	// Example: 2021-07-30T09:20:25+00:00
	EndsAt string `json:"ends_at,omitempty"`

	// The ID of the announcement.
	// Example: 01FC30T7X4TNCZK0TH90QYF3M4
	ID string `json:"id,omitempty"`

	// Mentions this announcement contains.
	Mentions []*Mention `json:"mentions"`

	// Announcement is 'published', ie., visible to users.
	// Announcements that are not published should be shown only to admins.
	Published bool `json:"published,omitempty"`

	// When the announcement was first published (ISO 8601 Datetime).
	// Example: 2021-07-30T09:20:25+00:00
	PublishedAt string `json:"published_at,omitempty"`

	// Reactions to this announcement.
	Reactions []*AnnouncementReaction `json:"reactions"`

	// Requesting account has seen this announcement.
	Read bool `json:"read,omitempty"`

	// When the announcement should begin to be displayed (ISO 8601 Datetime).
	// If the announcement has no start time, this will be omitted or empty.
	// Example: 2021-07-30T09:20:25+00:00
	StartsAt string `json:"starts_at,omitempty"`

	// Statuses contained in this announcement.
	Statuses []*Status `json:"statuses"`

	// Tags used in this announcement.
	Tags []*Tag `json:"tags"`

	// When the announcement was last updated (ISO 8601 Datetime).
	// Example: 2021-07-30T09:20:25+00:00
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this announcement
func (m *Announcement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmojis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMentions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Announcement) validateEmojis(formats strfmt.Registry) error {
	if swag.IsZero(m.Emojis) { // not required
		return nil
	}

	for i := 0; i < len(m.Emojis); i++ {
		if swag.IsZero(m.Emojis[i]) { // not required
			continue
		}

		if m.Emojis[i] != nil {
			if err := m.Emojis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emoji" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emoji" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) validateMentions(formats strfmt.Registry) error {
	if swag.IsZero(m.Mentions) { // not required
		return nil
	}

	for i := 0; i < len(m.Mentions); i++ {
		if swag.IsZero(m.Mentions[i]) { // not required
			continue
		}

		if m.Mentions[i] != nil {
			if err := m.Mentions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mentions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mentions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) validateReactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Reactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Reactions); i++ {
		if swag.IsZero(m.Reactions[i]) { // not required
			continue
		}

		if m.Reactions[i] != nil {
			if err := m.Reactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) validateStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	for i := 0; i < len(m.Statuses); i++ {
		if swag.IsZero(m.Statuses[i]) { // not required
			continue
		}

		if m.Statuses[i] != nil {
			if err := m.Statuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this announcement based on the context it is used
func (m *Announcement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmojis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMentions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Announcement) contextValidateEmojis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Emojis); i++ {

		if m.Emojis[i] != nil {

			if swag.IsZero(m.Emojis[i]) { // not required
				return nil
			}

			if err := m.Emojis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emoji" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emoji" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) contextValidateMentions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mentions); i++ {

		if m.Mentions[i] != nil {

			if swag.IsZero(m.Mentions[i]) { // not required
				return nil
			}

			if err := m.Mentions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mentions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mentions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) contextValidateReactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reactions); i++ {

		if m.Reactions[i] != nil {

			if swag.IsZero(m.Reactions[i]) { // not required
				return nil
			}

			if err := m.Reactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) contextValidateStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Statuses); i++ {

		if m.Statuses[i] != nil {

			if swag.IsZero(m.Statuses[i]) { // not required
				return nil
			}

			if err := m.Statuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Announcement) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Announcement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Announcement) UnmarshalBinary(b []byte) error {
	var res Announcement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
