// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AnnouncementReaction AnnouncementReaction models a user reaction to an announcement.
//
// swagger:model AnnouncementReaction
type AnnouncementReaction struct {

	// The total number of users who have added this reaction.
	// Example: 5
	Count int64 `json:"count,omitempty"`

	// This reaction belongs to the account viewing it.
	Me bool `json:"me,omitempty"`

	// The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.
	// Example: blobcat_uwu
	Name string `json:"name,omitempty"`

	// Web link to a non-animated image of the custom emoji.
	// Empty for unicode emojis.
	// Example: https://example.org/custom_emojis/statuc/blobcat_uwu.png
	StaticURL string `json:"static_url,omitempty"`

	// Web link to the image of the custom emoji.
	// Empty for unicode emojis.
	// Example: https://example.org/custom_emojis/original/blobcat_uwu.png
	URL string `json:"url,omitempty"`
}

// Validate validates this announcement reaction
func (m *AnnouncementReaction) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this announcement reaction based on context it is used
func (m *AnnouncementReaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnnouncementReaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnnouncementReaction) UnmarshalBinary(b []byte) error {
	var res AnnouncementReaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
