// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new media API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for media API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	MediaCreate(params *MediaCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MediaCreateOK, error)

	MediaGet(params *MediaGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MediaGetOK, error)

	MediaUpdate(params *MediaUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MediaUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
MediaCreate uploads a new media attachment
*/
func (a *Client) MediaCreate(params *MediaCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MediaCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mediaCreate",
		Method:             "POST",
		PathPattern:        "/api/{api_version}/media",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MediaCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mediaCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MediaGet gets a media attachment that you own
*/
func (a *Client) MediaGet(params *MediaGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MediaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mediaGet",
		Method:             "GET",
		PathPattern:        "/api/v1/media/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MediaGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mediaGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	MediaUpdate updates a media attachment

	You must own the media attachment, and the attachment must not yet be attached to a status.

The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'.
The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'.
*/
func (a *Client) MediaUpdate(params *MediaUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MediaUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mediaUpdate",
		Method:             "PUT",
		PathPattern:        "/api/v1/media/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MediaUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mediaUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
