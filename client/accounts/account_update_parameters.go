// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAccountUpdateParams creates a new AccountUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAccountUpdateParams() *AccountUpdateParams {
	return &AccountUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAccountUpdateParamsWithTimeout creates a new AccountUpdateParams object
// with the ability to set a timeout on a request.
func NewAccountUpdateParamsWithTimeout(timeout time.Duration) *AccountUpdateParams {
	return &AccountUpdateParams{
		timeout: timeout,
	}
}

// NewAccountUpdateParamsWithContext creates a new AccountUpdateParams object
// with the ability to set a context for a request.
func NewAccountUpdateParamsWithContext(ctx context.Context) *AccountUpdateParams {
	return &AccountUpdateParams{
		Context: ctx,
	}
}

// NewAccountUpdateParamsWithHTTPClient creates a new AccountUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewAccountUpdateParamsWithHTTPClient(client *http.Client) *AccountUpdateParams {
	return &AccountUpdateParams{
		HTTPClient: client,
	}
}

/*
AccountUpdateParams contains all the parameters to send to the API endpoint

	for the account update operation.

	Typically these are written to a http.Request.
*/
type AccountUpdateParams struct {

	/* Avatar.

	   Avatar of the user.
	*/
	Avatar runtime.NamedReadCloser

	/* Bot.

	   Account is flagged as a bot.
	*/
	Bot *bool

	/* CustomCSS.

	   Custom CSS to use when rendering this account's profile or statuses. String must be no more than 5,000 characters (~5kb).
	*/
	CustomCSS *string

	/* Discoverable.

	   Account should be made discoverable and shown in the profile directory (if enabled).
	*/
	Discoverable *bool

	/* DisplayName.

	   The display name to use for the account.
	*/
	DisplayName string

	/* EnableRss.

	   Enable RSS feed for this account's Public posts at `/[username]/feed.rss`
	*/
	EnableRss *bool

	/* FieldsAttributes0Name.

	   Name of profile field to be added to this account's profile. (The index may be any string; add more indexes to send more fields.)
	*/
	FieldsAttributes0Name *string

	/* FieldsAttributes0Value.

	   Value of profile field to be added to this account's profile. (The index may be any string; add more indexes to send more fields.)
	*/
	FieldsAttributes0Value *string

	/* Header.

	   Header of the user.
	*/
	Header runtime.NamedReadCloser

	/* Locked.

	   Require manual approval of follow requests.
	*/
	Locked *bool

	/* Note.

	   Bio/description of this account.
	*/
	Note string

	/* SourceLanguage.

	   Default language to use for authored statuses (ISO 6391).
	*/
	SourceLanguage *string

	/* SourcePrivacy.

	   Default post privacy for authored statuses.
	*/
	SourcePrivacy *string

	/* SourceSensitive.

	   Mark authored statuses as sensitive by default.
	*/
	SourceSensitive *bool

	/* SourceStatusContentType.

	   Default content type to use for authored statuses (text/plain or text/markdown).
	*/
	SourceStatusContentType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the account update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountUpdateParams) WithDefaults() *AccountUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the account update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the account update params
func (o *AccountUpdateParams) WithTimeout(timeout time.Duration) *AccountUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the account update params
func (o *AccountUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the account update params
func (o *AccountUpdateParams) WithContext(ctx context.Context) *AccountUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the account update params
func (o *AccountUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the account update params
func (o *AccountUpdateParams) WithHTTPClient(client *http.Client) *AccountUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the account update params
func (o *AccountUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAvatar adds the avatar to the account update params
func (o *AccountUpdateParams) WithAvatar(avatar runtime.NamedReadCloser) *AccountUpdateParams {
	o.SetAvatar(avatar)
	return o
}

// SetAvatar adds the avatar to the account update params
func (o *AccountUpdateParams) SetAvatar(avatar runtime.NamedReadCloser) {
	o.Avatar = avatar
}

// WithBot adds the bot to the account update params
func (o *AccountUpdateParams) WithBot(bot *bool) *AccountUpdateParams {
	o.SetBot(bot)
	return o
}

// SetBot adds the bot to the account update params
func (o *AccountUpdateParams) SetBot(bot *bool) {
	o.Bot = bot
}

// WithCustomCSS adds the customCSS to the account update params
func (o *AccountUpdateParams) WithCustomCSS(customCSS *string) *AccountUpdateParams {
	o.SetCustomCSS(customCSS)
	return o
}

// SetCustomCSS adds the customCss to the account update params
func (o *AccountUpdateParams) SetCustomCSS(customCSS *string) {
	o.CustomCSS = customCSS
}

// WithDiscoverable adds the discoverable to the account update params
func (o *AccountUpdateParams) WithDiscoverable(discoverable *bool) *AccountUpdateParams {
	o.SetDiscoverable(discoverable)
	return o
}

// SetDiscoverable adds the discoverable to the account update params
func (o *AccountUpdateParams) SetDiscoverable(discoverable *bool) {
	o.Discoverable = discoverable
}

// WithDisplayName adds the displayName to the account update params
func (o *AccountUpdateParams) WithDisplayName(displayName string) *AccountUpdateParams {
	o.SetDisplayName(displayName)
	return o
}

// SetDisplayName adds the displayName to the account update params
func (o *AccountUpdateParams) SetDisplayName(displayName string) {
	o.DisplayName = displayName
}

// WithEnableRss adds the enableRss to the account update params
func (o *AccountUpdateParams) WithEnableRss(enableRss *bool) *AccountUpdateParams {
	o.SetEnableRss(enableRss)
	return o
}

// SetEnableRss adds the enableRss to the account update params
func (o *AccountUpdateParams) SetEnableRss(enableRss *bool) {
	o.EnableRss = enableRss
}

// WithFieldsAttributes0Name adds the fieldsAttributes0Name to the account update params
func (o *AccountUpdateParams) WithFieldsAttributes0Name(fieldsAttributes0Name *string) *AccountUpdateParams {
	o.SetFieldsAttributes0Name(fieldsAttributes0Name)
	return o
}

// SetFieldsAttributes0Name adds the fieldsAttributes0Name to the account update params
func (o *AccountUpdateParams) SetFieldsAttributes0Name(fieldsAttributes0Name *string) {
	o.FieldsAttributes0Name = fieldsAttributes0Name
}

// WithFieldsAttributes0Value adds the fieldsAttributes0Value to the account update params
func (o *AccountUpdateParams) WithFieldsAttributes0Value(fieldsAttributes0Value *string) *AccountUpdateParams {
	o.SetFieldsAttributes0Value(fieldsAttributes0Value)
	return o
}

// SetFieldsAttributes0Value adds the fieldsAttributes0Value to the account update params
func (o *AccountUpdateParams) SetFieldsAttributes0Value(fieldsAttributes0Value *string) {
	o.FieldsAttributes0Value = fieldsAttributes0Value
}

// WithHeader adds the header to the account update params
func (o *AccountUpdateParams) WithHeader(header runtime.NamedReadCloser) *AccountUpdateParams {
	o.SetHeader(header)
	return o
}

// SetHeader adds the header to the account update params
func (o *AccountUpdateParams) SetHeader(header runtime.NamedReadCloser) {
	o.Header = header
}

// WithLocked adds the locked to the account update params
func (o *AccountUpdateParams) WithLocked(locked *bool) *AccountUpdateParams {
	o.SetLocked(locked)
	return o
}

// SetLocked adds the locked to the account update params
func (o *AccountUpdateParams) SetLocked(locked *bool) {
	o.Locked = locked
}

// WithNote adds the note to the account update params
func (o *AccountUpdateParams) WithNote(note string) *AccountUpdateParams {
	o.SetNote(note)
	return o
}

// SetNote adds the note to the account update params
func (o *AccountUpdateParams) SetNote(note string) {
	o.Note = note
}

// WithSourceLanguage adds the sourceLanguage to the account update params
func (o *AccountUpdateParams) WithSourceLanguage(sourceLanguage *string) *AccountUpdateParams {
	o.SetSourceLanguage(sourceLanguage)
	return o
}

// SetSourceLanguage adds the sourceLanguage to the account update params
func (o *AccountUpdateParams) SetSourceLanguage(sourceLanguage *string) {
	o.SourceLanguage = sourceLanguage
}

// WithSourcePrivacy adds the sourcePrivacy to the account update params
func (o *AccountUpdateParams) WithSourcePrivacy(sourcePrivacy *string) *AccountUpdateParams {
	o.SetSourcePrivacy(sourcePrivacy)
	return o
}

// SetSourcePrivacy adds the sourcePrivacy to the account update params
func (o *AccountUpdateParams) SetSourcePrivacy(sourcePrivacy *string) {
	o.SourcePrivacy = sourcePrivacy
}

// WithSourceSensitive adds the sourceSensitive to the account update params
func (o *AccountUpdateParams) WithSourceSensitive(sourceSensitive *bool) *AccountUpdateParams {
	o.SetSourceSensitive(sourceSensitive)
	return o
}

// SetSourceSensitive adds the sourceSensitive to the account update params
func (o *AccountUpdateParams) SetSourceSensitive(sourceSensitive *bool) {
	o.SourceSensitive = sourceSensitive
}

// WithSourceStatusContentType adds the sourceStatusContentType to the account update params
func (o *AccountUpdateParams) WithSourceStatusContentType(sourceStatusContentType *string) *AccountUpdateParams {
	o.SetSourceStatusContentType(sourceStatusContentType)
	return o
}

// SetSourceStatusContentType adds the sourceStatusContentType to the account update params
func (o *AccountUpdateParams) SetSourceStatusContentType(sourceStatusContentType *string) {
	o.SourceStatusContentType = sourceStatusContentType
}

// WriteToRequest writes these params to a swagger request
func (o *AccountUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Avatar != nil {

		if o.Avatar != nil {
			// form file param avatar
			if err := r.SetFileParam("avatar", o.Avatar); err != nil {
				return err
			}
		}
	}

	if o.Bot != nil {

		// form param bot
		var frBot bool
		if o.Bot != nil {
			frBot = *o.Bot
		}
		fBot := swag.FormatBool(frBot)
		if fBot != "" {
			if err := r.SetFormParam("bot", fBot); err != nil {
				return err
			}
		}
	}

	if o.CustomCSS != nil {

		// form param custom_css
		var frCustomCSS string
		if o.CustomCSS != nil {
			frCustomCSS = *o.CustomCSS
		}
		fCustomCSS := frCustomCSS
		if fCustomCSS != "" {
			if err := r.SetFormParam("custom_css", fCustomCSS); err != nil {
				return err
			}
		}
	}

	if o.Discoverable != nil {

		// form param discoverable
		var frDiscoverable bool
		if o.Discoverable != nil {
			frDiscoverable = *o.Discoverable
		}
		fDiscoverable := swag.FormatBool(frDiscoverable)
		if fDiscoverable != "" {
			if err := r.SetFormParam("discoverable", fDiscoverable); err != nil {
				return err
			}
		}
	}

	// form param display_name
	frDisplayName := o.DisplayName
	fDisplayName := frDisplayName
	if err := r.SetFormParam("display_name", fDisplayName); err != nil {
		return err
	}

	if o.EnableRss != nil {

		// form param enable_rss
		var frEnableRss bool
		if o.EnableRss != nil {
			frEnableRss = *o.EnableRss
		}
		fEnableRss := swag.FormatBool(frEnableRss)
		if fEnableRss != "" {
			if err := r.SetFormParam("enable_rss", fEnableRss); err != nil {
				return err
			}
		}
	}

	if o.FieldsAttributes0Name != nil {

		// form param fields_attributes[0][name]
		var frFieldsAttributes0Name string
		if o.FieldsAttributes0Name != nil {
			frFieldsAttributes0Name = *o.FieldsAttributes0Name
		}
		fFieldsAttributes0Name := frFieldsAttributes0Name
		if fFieldsAttributes0Name != "" {
			if err := r.SetFormParam("fields_attributes[0][name]", fFieldsAttributes0Name); err != nil {
				return err
			}
		}
	}

	if o.FieldsAttributes0Value != nil {

		// form param fields_attributes[0][value]
		var frFieldsAttributes0Value string
		if o.FieldsAttributes0Value != nil {
			frFieldsAttributes0Value = *o.FieldsAttributes0Value
		}
		fFieldsAttributes0Value := frFieldsAttributes0Value
		if fFieldsAttributes0Value != "" {
			if err := r.SetFormParam("fields_attributes[0][value]", fFieldsAttributes0Value); err != nil {
				return err
			}
		}
	}

	if o.Header != nil {

		if o.Header != nil {
			// form file param header
			if err := r.SetFileParam("header", o.Header); err != nil {
				return err
			}
		}
	}

	if o.Locked != nil {

		// form param locked
		var frLocked bool
		if o.Locked != nil {
			frLocked = *o.Locked
		}
		fLocked := swag.FormatBool(frLocked)
		if fLocked != "" {
			if err := r.SetFormParam("locked", fLocked); err != nil {
				return err
			}
		}
	}

	// form param note
	frNote := o.Note
	fNote := frNote
	if err := r.SetFormParam("note", fNote); err != nil {
		return err
	}

	if o.SourceLanguage != nil {

		// form param source[language]
		var frSourceLanguage string
		if o.SourceLanguage != nil {
			frSourceLanguage = *o.SourceLanguage
		}
		fSourceLanguage := frSourceLanguage
		if fSourceLanguage != "" {
			if err := r.SetFormParam("source[language]", fSourceLanguage); err != nil {
				return err
			}
		}
	}

	if o.SourcePrivacy != nil {

		// form param source[privacy]
		var frSourcePrivacy string
		if o.SourcePrivacy != nil {
			frSourcePrivacy = *o.SourcePrivacy
		}
		fSourcePrivacy := frSourcePrivacy
		if fSourcePrivacy != "" {
			if err := r.SetFormParam("source[privacy]", fSourcePrivacy); err != nil {
				return err
			}
		}
	}

	if o.SourceSensitive != nil {

		// form param source[sensitive]
		var frSourceSensitive bool
		if o.SourceSensitive != nil {
			frSourceSensitive = *o.SourceSensitive
		}
		fSourceSensitive := swag.FormatBool(frSourceSensitive)
		if fSourceSensitive != "" {
			if err := r.SetFormParam("source[sensitive]", fSourceSensitive); err != nil {
				return err
			}
		}
	}

	if o.SourceStatusContentType != nil {

		// form param source[status_content_type]
		var frSourceStatusContentType string
		if o.SourceStatusContentType != nil {
			frSourceStatusContentType = *o.SourceStatusContentType
		}
		fSourceStatusContentType := frSourceStatusContentType
		if fSourceStatusContentType != "" {
			if err := r.SetFormParam("source[status_content_type]", fSourceStatusContentType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
