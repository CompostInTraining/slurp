// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ReportCreate(params *ReportCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReportCreateOK, error)

	ReportGet(params *ReportGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReportGetOK, error)

	Reports(params *ReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReportsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ReportCreate creates a new user report with the given parameters
*/
func (a *Client) ReportCreate(params *ReportCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReportCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reportCreate",
		Method:             "POST",
		PathPattern:        "/api/v1/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReportCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reportCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReportGet gets one report with the given id
*/
func (a *Client) ReportGet(params *ReportGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReportGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reportGet",
		Method:             "GET",
		PathPattern:        "/api/v1/reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReportGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reportGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	Reports sees reports created by the requesting account

	The reports will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).

The next and previous queries can be parsed from the returned Link header.

Example:

```
<https://example.org/api/v1/reports?limit=20&max_id=01FC0SKA48HNSVR6YKZCQGS2V8>; rel="next", <https://example.org/api/v1/reports?limit=20&min_id=01FC0SKW5JK2Q4EVAV2B462YY0>; rel="prev"
````
*/
func (a *Client) Reports(params *ReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reports",
		Method:             "GET",
		PathPattern:        "/api/v1/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
